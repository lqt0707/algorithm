/**
 * 插入排序（Insertion Sort）是一种简单直观的排序算法，其原理是将数组分为已排序部分和未排序部分，逐步将未排序部分的元素插入到已排序部分的合适位置。

插入排序的工作原理如下：

遍历数组：从数组的第二个元素开始，依次向后遍历每个元素。

将当前元素插入已排序部分：将当前元素与已排序部分的元素进行比较，找到合适的位置插入当前元素。

移动元素：如果找到插入位置，则需要将已排序部分中的较大（或较小）元素向后移动一位，为当前元素腾出插入位置。

插入元素：将当前元素插入到已排序部分的合适位置。

重复步骤 2-4：继续遍历剩余的未排序元素，重复进行插入操作，直到遍历完整个数组。

完成排序：当遍历完数组后，所有元素都已按照升序（或降序）排列。

插入排序的关键点在于每次内层循环都将当前元素与已排序部分的元素进行比较，并找到合适的插入位置。通过不断比较并移动元素，逐步构建有序的子序列，最终完成整个数组的排序。

插入排序的时间复杂度为 O(n^2)，其中 n 是数组的长度。尽管插入排序的时间复杂度较高，但由于其对于部分有序的数组或小规模数据的排序效果较好，插入排序在实际应用中仍然被广泛使用。此外，插入排序是稳定的排序算法，即相等元素的相对顺序在排序后保持不变。
 */

export function insertSort(array) {
  for (let i = 0; i < array.length; i++) {
    let j = i;
    let target = array[j];
    // 将当前元素跟已排序好的部分进行比较
    while (j > 0 && array[j - 1] > target) {
      // 将值大的放在后面
      array[j] = array[j - 1];
      j--;
    }
    array[j] = target;
  }
  return array;
}
console.log(insertSort([3, 1, 5, 4, 64, 322, 3, 26, 7, 0]));